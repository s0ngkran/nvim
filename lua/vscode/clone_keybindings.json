
[
  {
    "key": "cmd+backspace cmd+backspace",
    "command": "workbench.action.debug.pause",
    "when": "debugState == 'running'"
  },
  {
    "key": "f6",
    "command": "-workbench.action.debug.pause",
    "when": "debugState == 'running'"
  },
  {
    "key": "f5",
    "command": "-workbench.action.debug.start",
    "when": "debuggersAvailable && debugState == 'inactive'"
  },
  {
    "key": "ctrl+f5",
    "command": "-flutter.hotReload",
    "when": "dart-code:anyFlutterProjectLoaded && dart-code:service.reloadSources && inDebugMode"
  },
  {
    "key": "ctrl+shift+cmd+f5",
    "command": "workbench.action.debug.continue",
    "when": "debugState == 'stopped'"
  },
  {
    "key": "f5",
    "command": "-workbench.action.debug.continue",
    "when": "debugState == 'stopped'"
  },
  {
    "key": "ctrl+shift+cmd+f5",
    "command": "debug.openView",
    "when": "!debuggersAvailable"
  },
  {
    "key": "f5",
    "command": "-debug.openView",
    "when": "!debuggersAvailable"
  },
  {
    "key": "ctrl+shift+cmd+9",
    "command": "editor.debug.action.toggleBreakpoint",
    "when": "debuggersAvailable && editorTextFocus"
  },
  {
    "key": "f9",
    "command": "-editor.debug.action.toggleBreakpoint",
    "when": "debuggersAvailable && editorTextFocus"
  },
  {
    "key": "backspace",
    "command": "-markdown.extension.onBackspaceKey",
    "when": "editorTextFocus && !editorReadonly && !suggestWidgetVisible && editorLangId == 'markdown' && vim.mode != 'CommandlineInProgress' && vim.mode != 'EasyMotionInputMode' && vim.mode != 'EasyMotionMode' && vim.mode != 'Normal' && vim.mode != 'Replace' && vim.mode != 'SearchInProgressMode' && vim.mode != 'SurroundInputMode' && vim.mode != 'Visual' && vim.mode != 'VisualBlock' && vim.mode != 'VisualLine'"
  },
  {
    "key": "shift+backspace",
    "command": "-extension.vim_shift+backspace",
    "when": "editorTextFocus && vim.active && vim.use<S-BS> && !inDebugRepl && vim.mode != 'Insert'"
  },
  {
    "key": "backspace",
    "command": "-extension.vim_backspace",
    "when": "editorTextFocus && vim.active && !inDebugRepl"
  },
  {
    "key": "cmd+e",
    "command": "editor.action.revealDefinition",
    "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
  },
  {
    "key": "f12",
    "command": "-editor.action.revealDefinition",
    "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
  },
  {
    "key": "cmd+2",
    "command": "editor.action.formatDocument.none",
    "when": "editorTextFocus && !editorHasDocumentFormattingProvider && !editorReadonly"
  },
  {
    "key": "ctrl+r",
    "command": "-workbench.action.openRecent"
  },
  {
    "key": "cmd+t",
    "command": "-workbench.action.showAllSymbols"
  },
  {
    "key": "ctrl+tab",
    "command": "workbench.action.quickOpenRecent"
  },
  {
    "key": "ctrl+tab",
    "command": "-workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup"
  },
  {
    "key": "cmd+u",
    "command": "-cursorUndo",
    "when": "textInputFocus"
  },
  {
    "key": "cmd+u",
    "command": "editor.toggleFold",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "cmd+k cmd+l",
    "command": "-editor.toggleFold",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "f3",
    "command": "-editor.action.nextMatchFindAction",
    "when": "editorFocus"
  },
  {
    "key": "f3",
    "command": "-workbench.action.terminal.findNext",
    "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "f3",
    "command": "workbench.action.files.save"
  },
  {
    "key": "shift+cmd+t",
    "command": "workbench.action.quickOpenRecent"
  },
  {
    "key": "cmd+,",
    "command": "-workbench.action.openSettings"
  },
  {
    "key": "cmd+,",
    "command": "notebook.formatCell",
    "when": "editorHasDocumentFormattingProvider && editorTextFocus && inCompositeEditor && notebookEditable && !editorReadonly && activeEditor == 'workbench.editor.notebook'"
  },
  {
    "key": "cmd+,",
    "command": "editor.action.formatDocument",
    "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor"
  },
  {
    "key": "cmd+,",
    "command": "editor.action.formatDocument.none",
    "when": "editorTextFocus && !editorHasDocumentFormattingProvider && !editorReadonly"
  },
  {
    "key": "cmd+,",
    "command": "notebook.format",
    "when": "notebookEditable && !editorTextFocus && activeEditor == 'workbench.editor.notebook'"
  },
  {
    "key": "cmd+,",
    "command": "filesExplorer.findInFolder",
    "when": "explorerResourceIsFolder && explorerViewletVisible && filesExplorerFocus && !inputFocus"
  },
  {
    "key": "backspace",
    "command": "-deleteLeft",
    "when": "textInputFocus"
  },
  {
    "key": "delete",
    "command": "-extension.vim_delete",
    "when": "editorTextFocus && vim.active && !inDebugRepl"
  },
  {
    "key": "delete",
    "command": "-deleteRight",
    "when": "textInputFocus"
  },
  {
    "key": "backspace",
    "command": "deleteLeft",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+backspace",
    "command": "-deleteLeft",
    "when": "textInputFocus"
  },
  {
    "key": "shift+backspace",
    "command": "deleteRight",
    "when": "textInputFocus"
  },
  {
    "key": "shift+cmd+t",
    "command": "-workbench.action.reopenClosedEditor"
  },
  {
    "key": "cmd+enter",
    "command": "editor.action.triggerSuggest",
    "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
  },
  {
    "key": "alt+escape",
    "command": "-editor.action.triggerSuggest",
    "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
  },
  // {
  //     "key": "ctrl+n",
  //     "command": "-workbench.action.quickOpenSelectNext",
  //     "when": "inQuickOpen"
  // },
  // {
  //     "key": "down",
  //     "command": "-selectNextSuggestion",
  //     "when": "textInputFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
  // },
  // {
  //     "key": "down",
  //     "command": "-selectNextSuggestion",
  //     "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  // },
  {
    "key": "ctrl+tab",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "up",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+l",
    "command": "-notebook.centerActiveCell",
    "when": "notebookEditorFocused"
  },
  {
    "key": "ctrl+l",
    "command": "-extension.vim_navigateCtrlL",
    "when": "editorTextFocus && vim.active && vim.use<C-l> && !inDebugRepl"
  },
  {
    "key": "f7",
    "command": "flutter.hotRestart"
  },
  // {
  //     "key": "cmd+p",
  //     "command": "workbench.action.quickOpen"
  // },
  // {
  //     "key": "cmd+p",
  //     "command": "-workbench.action.quickOpen"
  // },
  {
    "key": "cmd+p",
    "command": "workbench.action.quickOpenNavigateNextInFilePicker",
    "when": "inFilesPicker && inQuickOpen"
  },
  // {
  //     "key": "down",
  //     "command": "settings.action.focusSettingsFile",
  //     "when": "inSettingsSearch && !suggestWidgetVisible"
  // },
  // {
  //     "key": "down",
  //     "command": "-settings.action.focusSettingsFile",
  //     "when": "inSettingsSearch && !suggestWidgetVisible"
  // },
  // {
  //     "key": "down",
  //     "command": "settings.action.focusSettingsFromSearch",
  //     "when": "inSettingsSearch && !suggestWidgetVisible"
  // },
  // {
  //     "key": "down",
  //     "command": "-settings.action.focusSettingsFromSearch",
  //     "when": "inSettingsSearch && !suggestWidgetVisible"
  // },
  // {
  //     "key": "down",
  //     "command": "history.showNext",
  //     "when": "historyNavigationForwardsEnabled && historyNavigationWidgetFocus && !suggestWidgetVisible"
  // },
  // {
  //     "key": "down",
  //     "command": "-history.showNext",
  //     "when": "historyNavigationForwardsEnabled && historyNavigationWidgetFocus && !suggestWidgetVisible"
  // },
  // {
  //     "key": "down",
  //     "command": "workbench.action.terminal.navigationModeFocusNext",
  //     "when": "accessibilityModeEnabled && terminalA11yTreeFocus && terminalNavigationModeActive && terminalProcessSupported || accessibilityModeEnabled && terminalFocus && terminalNavigationModeActive && terminalProcessSupported"
  // },
  // {
  //     "key": "down",
  //     "command": "-workbench.action.terminal.navigationModeFocusNext",
  //     "when": "accessibilityModeEnabled && terminalA11yTreeFocus && terminalNavigationModeActive && terminalProcessSupported || accessibilityModeEnabled && terminalFocus && terminalNavigationModeActive && terminalProcessSupported"
  // },
  // {
  //     "key": "down",
  //     "command": "notebook.focusNextEditor",
  //     "when": "config.notebook.navigation.allowNavigateToSurroundingCells && notebookCursorNavigationMode && notebookEditorFocused && !notebookCellMarkdownEditMode && notebookCellType == 'markup'"
  // },
  // {
  //     "key": "down",
  //     "command": "-notebook.focusNextEditor",
  //     "when": "config.notebook.navigation.allowNavigateToSurroundingCells && notebookCursorNavigationMode && notebookEditorFocused && !notebookCellMarkdownEditMode && notebookCellType == 'markup'"
  // },
  // {
  //     "key": "down",
  //     "command": "notebook.focusNextEditor",
  //     "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'"
  // },
  // {
  //     "key": "down",
  //     "command": "-notebook.focusNextEditor",
  //     "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'"
  // },
  // {
  //     "key": "down",
  //     "command": "breadcrumbs.selectFocused",
  //     "when": "breadcrumbsActive && breadcrumbsVisible"
  // },
  // {
  //     "key": "down",
  //     "command": "-breadcrumbs.selectFocused",
  //     "when": "breadcrumbsActive && breadcrumbsVisible"
  // },
  // {
  //     "key": "down",
  //     "command": "cursorDown",
  //     "when": "textInputFocus"
  // },
  // {
  //     "key": "down",
  //     "command": "-cursorDown",
  //     "when": "textInputFocus"
  // },
  // {
  //     "key": "down",
  //     "command": "showNextParameterHint",
  //     "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
  // },
  // {
  //     "key": "down",
  //     "command": "-showNextParameterHint",
  //     "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
  // },
  // {
  //     "key": "down",
  //     "command": "workbench.action.interactivePlayground.arrowDown",
  //     "when": "interactivePlaygroundFocus && !editorTextFocus"
  // },
  // {
  //     "key": "down",
  //     "command": "-workbench.action.interactivePlayground.arrowDown",
  //     "when": "interactivePlaygroundFocus && !editorTextFocus"
  // },
  // {
  //     "key": "down up",
  //     "command": "workbench.statusBar.focusNext",
  //     "when": "statusBarFocused"
  // },
  // {
  //     "key": "down",
  //     "command": "-workbench.statusBar.focusNext",
  //     "when": "statusBarFocused"
  // },
  // {
  //     "key": "down",
  //     "command": "workbench.action.quickOpenNavigateNextInFilePicker",
  //     "when": "inFilesPicker && inQuickOpen"
  // },
  // {
  //     "key": "down",
  //     "command": "-list.focusDown",
  //     "when": "listFocus && !inputFocus"
  // },
  // {
  //     "key": "down",
  //     "command": "-interactive.history.next",
  //     "when": "!suggestWidgetVisible && resourceScheme == 'vscode-interactive' && interactiveInputCursorAtBoundary != 'none' && interactiveInputCursorAtBoundary != 'top'"
  // },
  // {
  //     "key": "down",
  //     "command": "workbench.banner.focusNextAction",
  //     "when": "bannerFocused"
  // },
  /// tested
  // [
  {
    "key": "ctrl+alt+cmd+n",
    "command": "-welcome.showNewFileEntries"
  },
  {
    "key": "cmd+n",
    "command": "-workbench.action.files.newUntitledFile"
  },
  // {
  //   "key": "tab",
  //   "command": "selectNextSuggestion",
  //   "when": "suggestWidgetVisible && suggestWidgetMultipleSuggestions"
  // },
  {
    "key": "shift+tab",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetVisible && suggestWidgetMultipleSuggestions"
  },
  {
    "key": "enter",
    "command": "acceptSelectedSuggestion",
    "when": "suggestWidgetVisible"
  },
  {
    "key": "cmd+r",
    "command": "-workbench.action.reloadWindow",
    "when": "isDevelopment"
  },
  {
    "key": "cmd+n",
    "command": "selectNextCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "cmd+n",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "cmd+r",
    "command": "selectPrevCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "cmd+r",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "f4",
    "command": "editor.action.marker.next",
    "args": "Error"
  },
  {
    "key": "f3",
    "command": "editor.action.marker.prev",
    "args": "Error"
  },
  {
    "key": "shift+cmd+w",
    "command": "workbench.action.closeEditorsInGroup"
  },
  {
    "key": "cmd+k w",
    "command": "-workbench.action.closeEditorsInGroup"
  },
  {
    "key": "cmd+f7",
    "command": "dart.startDebugging"
  },
  {
    "key": "cmd+f7",
    "command": "workbench.action.debug.run",
    "when": "debuggersAvailable && debugState != 'initializing'"
  },
  {
    "key": "ctrl+f5",
    "command": "-workbench.action.debug.run",
    "when": "debuggersAvailable && debugState != 'initializing'"
  },
  {
    "key": "f5",
    "command": "dart.hotReload",
    "when": "dart-code:isInDartDebugSession && inDebugMode && debugType == 'dart' || dart-code:service.reloadSources && inDebugMode && debugType == 'dart'"
  },
  {
    "key": "ctrl+f5",
    "command": "-dart.hotReload",
    "when": "dart-code:isInDartDebugSession && inDebugMode && debugType == 'dart' || dart-code:service.reloadSources && inDebugMode && debugType == 'dart'"
  },
  {
    "command": "vscode-neovim.compositeEscape1",
    "key": "j",
    "when": "neovim.mode == insert && editorTextFocus",
    "args": "j"
  },
  {
    "command": "vscode-neovim.compositeEscape2",
    "key": "k",
    "when": "neovim.mode == insert && editorTextFocus",
    "args": "k"
  },
  {
    "key": "shift+enter",
    "command": "github.copilot.acceptCursorPanelSolution",
    "when": "github.copilot.activated"
  },
  {
    "key": "ctrl+/",
    "command": "-github.copilot.acceptCursorPanelSolution",
    "when": "github.copilot.activated && github.copilot.panelVisible"
  },
  {
    "key": "ctrl+alt+cmd+enter",
    "command": "editor.action.insertLineAfter",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "cmd+enter",
    "command": "-editor.action.insertLineAfter",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+shift+alt+cmd+enter",
    "command": "editor.action.previousMatchFindAction",
    "when": "editorFocus && findInputFocussed"
  },
  {
    "key": "shift+enter",
    "command": "-editor.action.previousMatchFindAction",
    "when": "editorFocus && findInputFocussed"
  },
  {
    "key": "ctrl+shift+alt+cmd+enter",
    "command": "python.execSelectionInTerminal",
    "when": "editorTextFocus && !findInputFocussed && !jupyter.ownsSelection && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'"
  },
  {
    "key": "shift+enter",
    "command": "-python.execSelectionInTerminal",
    "when": "editorTextFocus && !findInputFocussed && !jupyter.ownsSelection && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'"
  },
  {
    "key": "ctrl+shift+alt+cmd+enter",
    "command": "notebook.cell.executeAndSelectBelow",
    "when": "notebookCellListFocused && notebookCellType == 'markup' || notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0"
  },
  {
    "key": "shift+enter",
    "command": "-notebook.cell.executeAndSelectBelow",
    "when": "notebookCellListFocused && notebookCellType == 'markup' || notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0"
  },
  {
    "key": "cmd+t",
    "command": "workbench.action.openPreviousRecentlyUsedEditor"
  },
  // explorer.newFile when in focused explorer without edit text and press a
  // add condition to avoid pressing a when adding new file
  {
    "key": "d",
    "command": "moveFileToTrash",
    "when": "explorerViewletFocus && !editorFocus && !inQuickOpen && !inputFocus && !findInputFocus && !renameInputFocus"
  },
  {
    "key": "cmd+d n",
    "command": "editor.action.diffReview.next",
    "when": "isInDiffEditor"
  },
  {
    "key": "f7",
    "command": "-editor.action.diffReview.next",
    "when": "isInDiffEditor"
  },
  {
    "key": "ctrl+alt+cmd+g s",
    "command": "git.sync"
  },
  {
    "key": "ctrl+alt+cmd+c b",
    "command": "git.branch"
  },
  {
    "key": "ctrl+alt+cmd+c c",
    "command": "pr.create"
  },
  {
    "key": "ctrl+alt+cmd+c t",
    "command": "git.checkout"
  },
  {
    "key": "ctrl+alt+cmd+s f",
    "command": "git.pullFrom"
  },
  {
    "key": "ctrl+alt+cmd+g c",
    "command": "git.commit"
  },
  {
    "key": "ctrl+alt+cmd+f d",
    "command": "flutter.selectDevice"
  },
  // navigate splitted like nvim
  {
    "key": "ctrl+h",

    "command": "workbench.action.navigateLeft"
  },
  {
    "key": "ctrl+l",
    "command": "workbench.action.navigateRight"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.navigateUp"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.action.navigateDown"
  },
  {
    "key": "ctrl+d",
    "command": "-list.focusPageDown",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "ctrl+u",
    "command": "-list.focusPageUp",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "pageDown",
    "command": "extension.multiCommand.execute",
    "args": {
      "sequence": [
        {
          "command": "vscode-neovim.send",
          "args": "<C-d>"
        },
        {
          "command": "vscode-neovim.send",
          "args": "zz"
        }
      ]
    },
    "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
  },
  {
    "key": "pageUp",
    "command": "extension.multiCommand.execute",
    "args": {
      "sequence": [
        {
          "command": "vscode-neovim.send",
          "args": "<C-u>"
        },
        {
          "command": "vscode-neovim.send",
          "args": "zz"
        }
      ]
    },
    "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
  },
  {
    "key": "ctrl+d",
    "command": "extension.multiCommand.execute",
    "args": {
      "sequence": [
        {
          "command": "vscode-neovim.send",
          "args": "<C-d>"
        },
        {
          "command": "vscode-neovim.send",
          "args": "zz"
        }
      ]
    },
    "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
  },
  {
    "key": "ctrl+u",
    "command": "extension.multiCommand.execute",
    "args": {
      "sequence": [
        {
          "command": "vscode-neovim.send",
          "args": "<C-u>"
        },
        {
          "command": "vscode-neovim.send",
          "args": "zz"
        }
      ]
    },
    "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
  },
  // map j to arrow down in problem panel
  {
    "key": "j",
    "command": "list.focusDown",
    "when": "problemFocus"
  },
  {
    "key": "k",
    "command": "list.focusUp",
    "when": "problemFocus"
  },
  {
    "key": "g g",
    "command": "list.focusFirst",
    "when": "problemFocus"
  },
  {
    "key": "escape",
    "command": "problems.action.focusProblemsFromFilter",
    "when": "problemsFilterFocus"
  },
  {
    "key": "cmd+t",
    "command": "openEditors.newUntitledFile"
  },
  {
    "key": "pageDown",
    "command": "search.action.focusNextSearchResult",
    "when": "hasSearchResult || inSearchEditor"
  },
  {
    "key": "pageUp",
    "command": "search.action.focusPreviousSearchResult",
    "when": "hasSearchResult || inSearchEditor"
  },
  {
    "key": "f7",
    "command": "extension.exportDartFilesInCurrentDirectory"
  },
  {
    "key": "ctrl+,",
    "command": "workbench.debug.action.focusRepl"
  },
  {
    "key": "ctrl+'",
    "command": "workbench.action.terminal.toggleTerminal",
    "when": "terminal.active"
  },
  {
    "key": "ctrl+`",
    "command": "-workbench.action.terminal.toggleTerminal",
    "when": "terminal.active"
  },
  {
    "key": "f3",
    "command": "workbench.action.toggleMaximizedPanel"
  }
]
