{
  "dart.previewFlutterUiGuides": true,
  "dart.previewFlutterUiGuidesCustomTracking": true,
  "dart.showInspectorNotificationsForWidgetErrors": false,
  "editor.formatOnSave": false,
  "terminal.integrated.inheritEnv": false,
  "zenMode.centerLayout": false,
  "zenMode.hideLineNumbers": false,
  "zenMode.silentNotifications": false,
  "diffEditor.wordWrap": "off",
  "dart.debugExternalPackageLibraries": false,
  "dart.debugSdkLibraries": false,
  "git.enableSmartCommit": true,
  "editor.scrollBeyondLastColumn": 33,
  "editor.minimap.maxColumn": 1222,
  "editor.wordWrap": "off",
  "debug.console.wordWrap": false,
  "workbench.colorTheme": "CodinCat",
  // "workbench.iconTheme": "Monokai Pro Icons",
  "workbench.editorAssociations": {
    "*.pdf": "default"
  },
  "jsonToDart.json.codecs": true,
  "jsonToDart.fastMode": true,
  "dart.analyzerSshHost": null,
  "git.useEditorAsCommitInput": false,
  "jsonToDart.avoidDynamicTypes": true,
  "jsonToDart.primaryConfiguration": true,
  "jsonToDart.runBuilder": false,
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  // "jsonToDart.toString": ""
  "editor.stickyScroll.enabled": true,
  "explorer.fileNesting.patterns": {
    "*.dart": "${capture}.g.dart, ${capture}.freezed.dart"
  },
  "explorer.fileNesting.enabled": true,
  "explorer.fileNesting.expand": false,

  "security.workspace.trust.enabled": false,
  "dart.warnWhenEditingFilesOutsideWorkspace": false,
  "dart.renameFilesWithClasses": "prompt",
  "editor.bracketPairColorization.enabled": true,
  "editor.inlineSuggest.enabled": true,
  "[jsonc]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "editor.fontSize": 12,
  "debug.console.fontSize": 14,
  "debug.autoExpandLazyVariables": true,
  "dart.warnWhenEditingFilesInPubCache": false,
  "[json]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  // "editor.accessibilitySupport": "on"
  "arduino.path": "/Volumes/CIRCUITPY",
  "[markdown]": {
    "editor.quickSuggestions": {
      "comments": "off",
      "strings": "off",
      "other": "off"
    },
    "editor.defaultFormatter": "yzhang.markdown-all-in-one"
  },
  // "dart.flutterSdkPath": ".fvm/flutter_sdk",
  // "dart.flutterSdkPaths": ["/Users/walter/fvm/versions"],
  // // Remove .fvm files from search
  // "search.exclude": {
  //   "**/.fvm": true
  // },
  // // Remove from file watching
  // "files.watcherExclude": {
  //   "**/.fvm": true
  // },
  "[python]": {
    "editor.formatOnType": true
  },
  "workbench.editor.openSideBySideDirection": "right",
  "javascript.updateImportsOnFileMove.enabled": "never",
  "[html]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "editor.tokenColorCustomizations": {
    // jjkk
  },
  "workbench.colorCustomizations": {
    "workbench.nvimColorNormal": "#03CF03",
    "workbench.nvimColorInsert": "#D32F2F",
    "workbench.nvimColorVisual": "#673AB7",
    "workbench.nvimColorReplace": "#000",
    "statusBar.background": "#004F83",
    "statusBar.noFolderBackground": "#004F83",
    "statusBar.debuggingBackground": "#004F83",
    "tab.activeBorder": "#ffc600",
    "editorCursor.foreground": "#ffc600"
  },
  "errorLens.enabledDiagnosticLevels": ["error", "warning", "info", "hint"],
  "errorLens.enableOnDiffView": true,
  "github.copilot.enable": {
    "*": true,
    "plaintext": true,
    "markdown": true,
    "scminput": false
  },
  "git.autofetch": true,

  "extensions.experimental.affinity": {
    "asvetliakov.vscode-neovim": 1
  },
  "dart.checkForSdkUpdates": false,
  "powermode.enabled": true,
  "powermode.shake.enabled": false,
  "powermode.explosions.offset": 0.35,
  "powermode.combo.counterEnabled": "hide",
  "powermode.combo.location": "off",
  "powermode.combo.timerEnabled": "hide",
  "githubPullRequests.setAutoMerge": true,
  "githubPullRequests.quickDiff": true,
  "gitlens.currentLine.enabled": false,
  "git.confirmSync": false,
  "editor.acceptSuggestionOnEnter": "off",
  "editor.tabCompletion": "on",
  "emmet.triggerExpansionOnTab": true,
  "vim.leader": "<space>",
  "vim.foldfix": true,
  "dart.lineLength": 120,
  "[dart]": {
    "editor.formatOnSave": true,
    "editor.formatOnType": true,
    "editor.rulers": [120],
    // "editor.codeActionsOnSave": {
    //   // "source.fixAll": true
    // },
    "editor.selectionHighlight": false,
    "editor.suggest.snippetsPreventQuickSuggestions": false,
    "editor.suggestSelection": "first",
    "editor.tabCompletion": "on",
    "editor.wordBasedSuggestions": false
  },
  "vim.easymotion": true,
  "vim.incsearch": true,
  "vim.useSystemClipboard": true,
  "vim.hlsearch": true,
  "vim.smartRelativeLine": false,
  "vim.visualstar": true,
  "vim.highlightedyank.enable": true,
  "vim.sneak": true,
  "vim.insertModeKeyBindings": [
    {
      "before": ["j", "j"],
      "after": ["<esc>"]
    },
    {
      "before": ["j", "q"],
      "after": ["j", "j", "I"]
    },
    {
      "before": ["j", "k"],
      "after": ["j", "j", "A"]
    }
  ],

  "vim.normalModeKeyBindings": [
    // {
    //     "before": [
    //         "<C-l>",
    //     ],
    //     "after": [
    //         "2",
    //         "0",
    //         "z",
    //         "h"
    //     ],
    // },
    {
      "before": ["B"],
      "after": ["<C-d>"]
    },
    {
      "before": ["W"],
      "after": ["<C-u>"]
    },

    // C-n  to C-d
    // {
    //   "before": ["<C-h>"],
    //   "after": ["<C-d>"]
    // },
    // C-r to C-u
    // {
    //   "before": ["<C-l>"],
    //   "after": ["<C-u>"]
    // },
    {
      "before": ["s"],
      "after": ["<leader>", "<leader>", "s"]
    },
    {
      "before": ["S"],
      "after": ["<leader>", "<leader>", "2", "s"]
    },
    {
      "before": ["L"],
      "after": ["$"]
    },
    {
      "before": ["H"],
      "after": ["^"]
    },
    {
      "before": ["g", "n"],
      "after": ["*"]
    },
    // command leader
    {
      "before": ["<leader>", "<leader>", ","],
      "after": [
        "y",
        "y",
        "?",
        "c",
        "o",
        "n",
        "s",
        "t",
        "<Enter>",
        "k",
        "p",
        "<Esc>",
        "c",
        "i",
        "w",
        "f",
        "i",
        "n",
        "a",
        "l",
        "<Esc>",
        "L",
        "r",
        ";",
        "h",
        "g",
        "n",
        "H",
        "w",
        "v",
        "n",
        "h",
        "c",
        "t",
        "h",
        "i",
        "s",
        ".",
        "<Esc>",
        "j"
      ]
    },
    {
      "before": ["<leader>", "<leader>", "."],
      "after": [":"],
      "commands": [":.s/,/,\\n/g"]
    },
    {
      "before": ["<leader>", "<leader>", "e"],
      "after": ["g", "g", ":", "<enter>"],
      "commands": [":/exports "]
    },
    {
      "before": ["<leader>", "<leader>", "E"],
      "after": ["<leader>", "<leader>", "e", "V", "G", "y"]
    },
    // tag g
    {
      "before": ["g", "y"],
      "after": ["V", "$", "%", "y"]
    },
    {
      "before": ["g", "v"],
      "after": ["V", "$", "%"]
    },

    {
      "before": ["g", "a"],
      "after": ["%"]
    },
    {
      "before": ["g", "s"],
      "after": ["y", "s", "i", "w"]
    },
    {
      "before": ["g", "p"],
      "after": ["<C-^>"]
    },
    // {
    //   "before": ["<leader>", "q"],
    //   "commands": [
    //     {
    //       "command": "workbench.action.closeActiveEditor"
    //     }
    //   ]
    // },
    // {
    //   "before": ["<leader>", "w"],
    //   "commands": [
    //     {
    //       "command": "workbench.action.files.save"
    //     }
    //   ]
    // },
    {
      "before": ["g", "e"],
      // show explorer
      "commands": [
        {
          "command": "workbench.view.explorer"
        }
      ]
    },
    {
      "before": ["<leader>", "\\"],
      // after :vsp
      "after": ["<C-w>", "v"]
    },
    {
      "before": ["<leader>", "|"],
      // after :sp
      "after": ["<C-w>", "s"]
    },
    {
      "before": ["<leader>", "j"],
      "after": ["<C-w>", "j"]
    },
    {
      "before": ["<leader>", "k"],
      "after": ["<C-w>", "k"]
    },
    {
      "before": ["<leader>", "h"],
      "after": ["<C-w>", "h"]
    },
    {
      "before": ["<leader>", "l"],
      "after": ["<C-w>", "l"]
    },
    // leaderw
    // leader w m to maximize
    {
      "before": ["<leader>", "w", "m"],
      // after maximize editor group horizontal using command
      "commands": [
        {
          "command": "workbench.action.maximizeEditor"
        }
      ]
    },
    {
      "before": ["<leader>", "w", "="],
      "after": ["<C-w>", "="]
    },
    // revealFileInOS using leader w f
    {
      "before": ["<leader>", "w", "f"],
      "commands": [
        {
          "command": "revealFileInOS"
        }
      ]
    },
    // increase width of window using c-w l
    {
      "before": ["<leader>", "w", "l"],
      "after": ["<C-w>", "<", "<C-w>", "<"]
    },
    // decrease
    {
      "before": ["<leader>", "w", "h"],
      "after": ["<C-w>", ">", "<C-w>", ">"]
    },
    {
      "before": ["-", "g"],
      "commands": [
        // git source controll
        {
          "command": "workbench.view.scm"
        }
      ]
    },
    // using leader w l to open git len
    {
      "before": ["<leader>", "w", "l"],
      // open git len show contributor view
      "commands": [
        {
          "command": "gitlens.showContributorsView"
        }
      ]
    },
    // using leader w p to open git pull request
    // aaoooooeuidhthtnnnnnnnnssssssss-----------p
    {
      "before": ["-", "p"],
      // open git pull request
      "commands": [
        {
          "command": "pr:github.focus"
        }
      ]
    },
    // wx
    {
      "before": ["-", "x"],
      // open extension
      "commands": [
        {
          "command": "workbench.view.extensions"
        }
      ]
    },
    // focus commetn view leader w c
    {
      "before": ["-", "c"],
      // open extension
      "commands": [
        {
          "command": "workbench.action.focusCommentsPanel"
        }
      ]
    },
    // workbench.action.problems.focus using leader w b
    {
      "before": ["-", "b"],
      // open extension
      "commands": [
        {
          "command": "workbench.action.problems.focus"
        }
      ]
    },
    // workbench.panel.repl.view.focus using leader w d
    {
      "before": ["-", "d"],
      // open extension
      "commands": [
        {
          "command": "workbench.panel.repl.view.focus"
        }
      ]
    },

    // tag git
    {
      "before": ["<leader>", "g", "g"],
      "commands": [
        {
          "command": "git-graph.view"
        }
      ]
    },

    // leader g b to toggle git blame file
    {
      "before": ["g", "l"],
      // toggle git blame file
      "commands": [
        {
          "command": "gitlens.toggleFileBlame"
        }
      ]
    },
    // leader g d to compare // gitlens.compareWith
    {
      "before": ["<leader>", "g", "d"], // git diff
      // toggle git blame file
      "commands": [
        {
          "command": "gitlens.compareWith"
        }
      ]
    },
    // git.stage using leader g a s
    {
      "before": ["<leader>", "g", "s"],
      // git.stage
      "commands": [
        {
          "command": "git.stage"
        }
      ]
    },
    // git.unstage using leader g a u
    {
      "before": ["<leader>", "g", "u"],
      // git.unstage
      "commands": [
        {
          "command": "git.unstage"
        }
      ]
    },
    // git commit using leader g a c
    {
      "before": ["<leader>", "g", "c"],
      // git commit
      "commands": [
        {
          "command": "git.commit"
        }
      ]
    },
    // git push using leader g a o
    {
      "before": ["<leader>", "g", "p", "s"],
      "commands": [
        {
          "command": "git.push"
        }
      ]
    },

    // git pull using leader g p
    {
      "before": ["<leader>", "g", "p"],
      "commands": [
        {
          "command": "git.pull"
        }
      ]
    },
    // debuging

    // start debug using leader d d
    {
      "before": ["<leader>", "d", "d"],
      // start debug
      "commands": [
        {
          "command": "workbench.action.debug.start"
        }
      ]
    },
    // restart debug using leader d r
    {
      "before": ["<leader>", "d", "r"],
      // restart debug
      "commands": [
        {
          "command": "workbench.action.debug.restart"
        }
      ]
    },
    // stop debug using leader d s
    {
      "before": ["<leader>", "d", "s"],
      // stop debug
      "commands": [
        {
          "command": "workbench.action.debug.stop"
        }
      ]
    },
    // toggle break point using leader d b
    {
      "before": ["<leader>", "d", "b"],
      // toggle break point
      "commands": [
        {
          "command": "editor.debug.action.toggleBreakpoint"
        }
      ]
    },
    // editor.action.marker.next using leader b n
    {
      "before": ["g", "x"],
      "commands": [
        {
          "command": "editor.action.marker.next"
        }
      ]
    },
    {
      "before": ["g", "X"],
      "commands": [
        {
          "command": "editor.action.marker.prev"
        }
      ]
    },
    // debug continue using leader d n
    {
      "before": ["<leader>", "d", "n"],
      "commands": [
        {
          "command": "workbench.action.debug.continue"
        }
      ]
    },
    // step over using leader d l
    {
      "before": ["<leader>", "d", "l"],
      "commands": [
        {
          "command": "workbench.action.debug.stepOver"
        }
      ]
    },
    // step out using leaded d o
    {
      "before": ["<leader>", "d", "o"],
      "commands": [
        {
          "command": "workbench.action.debug.stepOut"
        }
      ]
    },
    // debug step into using leader d i
    {
      "before": ["<leader>", "d", "i"],
      "commands": [
        {
          "command": "workbench.action.debug.stepInto"
        }
      ]
    },
    // disable all breakpoints using leader d c
    {
      "before": ["<leader>", "d", "c"],
      "commands": [
        {
          "command": "workbench.debug.viewlet.action.disableAllBreakpoints"
        }
      ]
    },

    // workbench.debug.action.focusVariablesView using leader d v
    {
      "before": ["<leader>", "d", "v"],
      // toggle break point
      "commands": [
        {
          "command": "workbench.debug.action.focusVariablesView"
        }
      ]
    },
    {
      "before": ["g", "c"],
      "commands": [
        {
          "command": "editor.action.commentLine"
        }
      ]
    },
    // leader a i to accept incoming
    {
      "before": ["<leader>", "a", "i"],
      "commands": [
        {
          "command": "merge-conflict.accept.incoming"
        }
      ]
    },
    // leader a c to accept current
    {
      "before": ["<leader>", "a", "c"],
      "commands": [
        {
          "command": "merge-conflict.accept.current"
        }
      ]
    },
    // leader a b to accept both
    {
      "before": ["<leader>", "a", "b"],
      "commands": [
        {
          "command": "merge-conflict.accept.all-both"
        }
      ]
    }
  ],
  "vim.visualModeKeyBindings": [
    {
      "before": ["g", "a"],
      "after": ["%"]
    },
    {
      "before": ["<leader>", "c"],
      // open extension
      "commands": [
        {
          "command": "workbench.action.addComment"
        }
      ]
    },
    // toggle line comment and go to normal mode using leader /
    {
      "before": ["<leader>", "/"],
      "commands": [
        {
          "command": "editor.action.commentLine"
        },
        {
          "command": "extension.vim_escape"
        }
      ]
    },
    {
      "before": ["s"],
      "after": ["<leader>", "<leader>", "s"]
    }
  ],
  "vim.statusBarColorControl": true,
  "vim.statusBarColors.insert": "#056000",
  "vim.statusBarColors.visualline": "#D2E10081",
  "vim.statusBarColors.visual": "#D2E10081",
  "vim.statusBarColors.visualblock": "#D2E10081",
  // normal as original vscode color
  "vim.statusBarColors.normal": "#004F83",
  "vim.statusBarColors.easymotionmode": "#6D0083",
  "vim.statusBarColors.easymotioninputmode": "#6D0083",
  "vim.statusBarColors.replace": "#A31515",
  "vim.highlightedyank.color": "#68366B9F",
  "vim.highlightedyank.duration": 1500,
  "vim.statusBarColors.commandlineinprogress": "#007acc",
  "vim.digraphs": {
    "oo": "🐮",
    "OO": "🐄"
  },
  "explorer.confirmDelete": false,
  "settingsSync.ignoredSettings": [],
  "diffEditor.ignoreTrimWhitespace": false,
  "terminal.integrated.env.osx": {
    "FIG_NEW_SESSION": "1"
  },
  "editor.accessibilitySupport": "off",
  "githubPullRequests.pullBranch": "never",
  "vscode-neovim.neovimExecutablePaths.darwin": "/opt/homebrew/bin/nvim",
  "vscode-neovim.neovimInitVimPaths.darwin": "~/.config/nvim/init.lua",
  "nvim-ui.nvimColorVisual": "#ffc600",
  "todohighlight.isEnable": true,
  "todohighlight.keywords": [
    {
      "text": "UU",
      "color": "#FF0BFB",
      "backgroundColor": "#FF03F7",
      "overviewRulerColor": "grey"
    },
    {
      "text": "(origin/",
      "color": "#FFFFFF",
      "backgroundColor": "#F5FFF900",
      "overviewRulerColor": "grey"
    },
    {
      "text": "origin/HEAD",
      "color": "#15FF00",
      "backgroundColor": "#46FF8400",
      "overviewRulerColor": "grey"
    },
    {
      "text": "HEAD -> ",
      "color": "#FFF700",
      "backgroundColor": "#FFEE0000",
      "overviewRulerColor": "grey"
    },
    {
      "text": "s0ngkran",
      "color": "#FFD000",
      "backgroundColor": "#FFFFFF00",
      "overviewRulerColor": "grey"
    }
  ],
  "files.autoSave": "afterDelay",
  "explorer.confirmDragAndDrop": false,
  "window.zoomLevel": 1
}
